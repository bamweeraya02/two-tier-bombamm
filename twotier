#include "ns3/mobility-module.h"
#include "ns3/nstime.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/flow-monitor-module.h"

#define TCP_SINK_PORT 9000
#define UDP_SINK_PORT 9001

// Experimental parameters
#define MAX_BULK_BYTES 100000
#define DDOS_RATE "1Mb/s"
#define MAX_SIMULATION_TIME 10

// Number of Bots for DDoS
#define NUMBER_OF_BOTS 10
#define NUMBER_OF_USERS 5  // Number of legitimate user nodes

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("TwoTierDDoSAttack");

int main(int argc, char *argv[])
{
    CommandLine cmd;
    cmd.Parse(argc, argv);

    Time::SetResolution(Time::NS);
    LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
    LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

    // First tier (server-side nodes)
    NodeContainer serverNodes;
    serverNodes.Create(2);  // Create two core nodes (server nodes)

    // Second tier (user-side nodes)
    NodeContainer userNodes;
    userNodes.Create(NUMBER_OF_USERS);  // Legitimate users

    // Nodes for attack bots
    NodeContainer botNodes;
    botNodes.Create(NUMBER_OF_BOTS);

    // Define the Point-To-Point Links and their Parameters
    PointToPointHelper p2p;
    p2p.SetDeviceAttribute("DataRate", StringValue("100Mbps"));
    p2p.SetChannelAttribute("Delay", StringValue("2ms"));

    // Connections between the first-tier nodes (servers)
    NetDeviceContainer firstTierDevices = p2p.Install(serverNodes.Get(0), serverNodes.Get(1));

    // Connections between user nodes and the second server node (second-tier)
    NetDeviceContainer userDevices[NUMBER_OF_USERS];
    for (uint32_t i = 0; i < NUMBER_OF_USERS; ++i)
    {
        userDevices[i] = p2p.Install(userNodes.Get(i), serverNodes.Get(1));
    }

    // Connections between bot nodes and the first server node (second-tier)
    NetDeviceContainer botDevices[NUMBER_OF_BOTS];
    for (uint32_t i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        botDevices[i] = p2p.Install(botNodes.Get(i), serverNodes.Get(0));
    }

    // Install the Internet stack on all nodes
    InternetStackHelper internet;
    internet.Install(serverNodes);
    internet.Install(userNodes);
    internet.Install(botNodes);

    // Assign IP addresses
    Ipv4AddressHelper ipv4;
    ipv4.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer firstTierInterfaces = ipv4.Assign(firstTierDevices);

    // IP addresses for users
    for (uint32_t i = 0; i < NUMBER_OF_USERS; ++i)
    {
        ipv4.SetBase("10.1.2." + std::to_string(i) + ".0", "255.255.255.0");
        ipv4.Assign(userDevices[i]);
    }

    // IP addresses for bots
    for (uint32_t i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        ipv4.SetBase("10.1.3." + std::to_string(i) + ".0", "255.255.255.0");
        ipv4.Assign(botDevices[i]);
    }

    // Legitimate TCP traffic from user nodes
    for (uint32_t i = 0; i < NUMBER_OF_USERS; ++i)
    {
        BulkSendHelper bulkSend("ns3::TcpSocketFactory", InetSocketAddress(firstTierInterfaces.GetAddress(1), TCP_SINK_PORT));
        bulkSend.SetAttribute("MaxBytes", UintegerValue(MAX_BULK_BYTES));
        ApplicationContainer userApp = bulkSend.Install(userNodes.Get(i));
        userApp.Start(Seconds(1.0));
        userApp.Stop(Seconds(MAX_SIMULATION_TIME));
    }

    // DDoS traffic from bot nodes
    for (uint32_t i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        OnOffHelper onoff("ns3::UdpSocketFactory", InetSocketAddress(firstTierInterfaces.GetAddress(0), UDP_SINK_PORT));
        onoff.SetConstantRate(DataRate(DDOS_RATE));
        ApplicationContainer botApp = onoff.Install(botNodes.Get(i));
        botApp.Start(Seconds(2.0));
        botApp.Stop(Seconds(MAX_SIMULATION_TIME));
    }

    // Sinks to receive traffic on server nodes
    PacketSinkHelper tcpSink("ns3::TcpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT));
    ApplicationContainer tcpSinkApp = tcpSink.Install(serverNodes.Get(1));
    tcpSinkApp.Start(Seconds(0.0));
    tcpSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    PacketSinkHelper udpSink("ns3::UdpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT));
    ApplicationContainer udpSinkApp = udpSink.Install(serverNodes.Get(0));
    udpSinkApp.Start(Seconds(0.0));
    udpSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // Enable packet capture for traffic monitoring
    p2p.EnablePcapAll("two-tier-topology");

    // Flow Monitor
    FlowMonitorHelper flowmon;
    Ptr<FlowMonitor> monitor = flowmon.InstallAll();

    // Animation
    AnimationInterface anim("two-tier-topology.xml");

    // Run the simulation
    Simulator::Stop(Seconds(MAX_SIMULATION_TIME));
    Simulator::Run();

    // Save Flow Monitor results
    monitor->SerializeToXmlFile("two-tier-flowmon.xml", true, true);

    Simulator::Destroy();
    return 0;
}
